#!/usr/bin/env python3

import argparse
import getpass
import itertools
import json
import os
import platform
import pwd
import shutil
import subprocess
import sys
import tempfile
from io import BytesIO
from os.path import abspath, dirname, exists, join, split, splitext
from subprocess import Popen
from urllib.request import urlopen
from zipfile import ZipFile

PLACEHOLDER = "__project_name__"

THIS_DIR = dirname(__file__)

POTENTIAL_TEMPLATE_DIRS = [
    THIS_DIR,
    "/usr/local/share/simulant",
    "/usr/share/simulant"
]

POTENTIAL_TOOLCHAIN_DIRS = [
    join(THIS_DIR, "toolchains"),
    join(dirname(THIS_DIR), "toolchains"),
    "/usr/local/share/simulant/toolchains",
    "/usr/share/simulant/toolchains"
]


LIBRARY_PATH_TEMPLATE = "libraries/{build_type}/{platform}-{architecture}/"
BUILD_PATH_TEMPLATE = "build/{build_type}/{platform}-{architecture}/"

DOCKER_CONTAINER_NAME = "simulant-dc-build"


def _check_tool(name):
    try:
        subprocess.check_output(["which", name])
        return True
    except subprocess.CalledProcessError:
        print("{} is not installed, or not found".format(name))
        return False


def _locate_toolchain_file(name):
    for path in POTENTIAL_TOOLCHAIN_DIRS:
        path = abspath(path)

        toolchain = join(path, "{}.cmake".format(name))
        if exists(toolchain):
            return toolchain


def _locate_template_folder():
    for path in POTENTIAL_TEMPLATE_DIRS:
        path = abspath(path)

        template = join(path, "template")

        if exists(template):
            return template


def _rename_files_and_directories(search, replacement, directory):
    " Recursively replaces 'search' in folder and filenames with 'replacement' "
    for root, subdirs, files in os.walk(directory):
        for subdir in subdirs:
            if PLACEHOLDER in subdir:
                path = join(root, subdir)
                dest = join(root, subdir.replace(PLACEHOLDER, replacement))
                shutil.move(path, dest)

        for file in files:
            if PLACEHOLDER in file:
                path = join(root, file)
                dest = join(root, file.replace(PLACEHOLDER, replacement))
                shutil.move(path, dest)


def _search_replace(search, replacement, directory, extensions=[".cpp", ".h", ".md", ".json", ".txt"]):
    "Recursively search replace text in files that match the extensions"
    for root, subdirs, files in os.walk(directory):
        for file in files:
            if splitext(file)[-1] in extensions:
                path = join(root, file)

                with open(path, "r") as f:
                    s = f.read()

                s = s.replace(search, replacement)

                with open(path, "w") as f:
                    f.write(s)


def _check_project():
    if not exists("simulant.json"):
        print("ERROR: Unable to find simulant.json")
        return False

    return True


class BuildOutput:
    build_dir = None


def _calculate_platform(platform_name):
    if platform_name == "native":
        return platform.system().lower()
    else:
        return platform_name.lower()


def _calculate_build_dir(args):
    kwargs = {
        "build_type": "release" if args.release else "debug"
    }

    if args.platform == "native":
        kwargs["platform"] = platform.system().lower()
        kwargs["architecture"] = platform.machine()
    elif args.platform == "dreamcast":
        kwargs["platform"] = "dreamcast"
        kwargs["architecture"] = "sh4"
        kwargs["build_type"] = "release"
    else:
        raise ValueError("{} not yet supported".format(args.platform))

    return BUILD_PATH_TEMPLATE.format(**kwargs)


def _calculate_simulant_dir(args):
    kwargs = {
        "build_type": "release" if args.release else "debug"
    }

    if args.platform == "native":
        kwargs["platform"] = platform.system().lower()
        kwargs["architecture"] = platform.machine()
    elif args.platform == "dreamcast":
        kwargs["platform"] = "dreamcast"
        kwargs["architecture"] = "sh4"
    elif platform.system().lower() in ("linux", "darwin"):
        kwargs["platform"] = platform.system().lower()
        kwargs["architecture"] = platform.machine()
    else:
        raise ValueError("{} not yet supported".format(args.platform))

    return LIBRARY_PATH_TEMPLATE.format(**kwargs)


def build(args, build_output=None):
    if not _check_project():
        return 1

    if not _check_tool("cmake"):
        return 2

    project_dir = os.getcwd()
    if args.platform == "dreamcast":
        project_dir = "/simulant-project"
        args.use_global_simulant = False
        args.release = True

    platform = _calculate_platform(args.platform)
    arch = args.platform
    build_dir = _calculate_build_dir(args)
    build_type = "release" if args.release else "debug"

    if not exists(build_dir):
        os.makedirs(build_dir)

    cmake_params = ""
    if build_type == "release":
        cmake_params += " -DCMAKE_BUILD_TYPE=Release"

    if not args.use_global_simulant:
        library_dir = join(project_dir, _calculate_simulant_dir(args))

        cmake_params += " -DSIMULANT_INCLUDE_FOLDER={}".format(
            join(library_dir, "include")
        )

        cmake_params += " -DSIMULANT_LIBRARY_FOLDER={}".format(
            join(library_dir, "lib")
        )

    if arch == "dreamcast":
        if not _check_tool("docker"):
            return 3

        toolchain = _locate_toolchain_file("Dreamcast")
        if not toolchain:
            print("Unable to find the Dreamcast toolchain file")
            return 4

        container_build_dir = join("/simulant-project", build_dir)

        cmake_params += " -DCMAKE_TOOLCHAIN_FILE={}".format(
            join("/simulant-project", "libraries", "Dreamcast.cmake")
        )

        _start_docker_container(container_build_dir)

        if build_output:
            build_output.build_dir = build_dir

        return _run_docker_command(
            'source /etc/bash.bashrc; cmake {} ../../.. && make'.format(cmake_params),
            check=False
        )

    elif arch == "windows" and platform.system() == "Linux":
        # We support cross-compiling from Linux to Windows using mingw64
        commands = [
            "mingw64-cmake" + cmake_params,
            "make"
        ]

        commands[0] += " ../../.."
        commands = [cmd.split() for cmd in commands]

    else:
        commands = [
            "cmake" + cmake_params,
            "make"
        ]

        commands[0] += " ../../.."
        commands = [cmd.split() for cmd in commands]

    for cmd in commands:
        print(cmd)
        subprocess.check_call(cmd, cwd=build_dir)

    if build_output:
        build_output.build_dir = build_dir

    return 0


def start(args):
    " Start a Simulant project with a template "

    if "/" in args.project:
        # FIXME: [a-zA-Z0-9_-]+
        print("Project name must not contain slashes")

    template_folder = _locate_template_folder()

    if not exists(template_folder):
        print("Error: Unable to locate Simulant template")
        return 1

    target_folder = join(abspath(args.target), args.project)

    if exists(target_folder) and not args.force:
        result = input("The target folder already exists and will be replaced, this cannot be undone. Continue? [y/N] ")
        if result.lower() != "y":
            return 0
        else:
            # Remove the directory before replacing it
            shutil.rmtree(target_folder)
    elif exists(target_folder) and args.force:
        # If we are forcing this, then just remove the folder without asking!
        shutil.rmtree(target_folder)

    shutil.copytree(template_folder, target_folder)

    # Rename any files that have the project name in them
    _rename_files_and_directories("__project_name__", args.project.replace(" ", "_").lower(), target_folder)

    # Replace the project name throughout
    _search_replace("__project_name__", args.project, target_folder)

    # These two replace with project_name or PROJECT_NAME respectively
    _search_replace("__project_name_lower__", args.project.lower().replace(" ", "_"), target_folder)
    _search_replace("__project_name_upper__", args.project.upper().replace(" ", "_"), target_folder)

    pascal_name = args.project.replace("-", " ").title().replace(" ", "")

    # Replace with ProjectName
    _search_replace("__project_name_pascal__", pascal_name, target_folder)

    # Change to the project directory
    os.chdir(target_folder)

    # Run the update command to get the latest simulant libraries
    update(args)

    print("\n\nProject successfully created. Remember to edit simulant.json before packaging!")

    return 0


def _generate_flatpak(args, build_dir):
    META_TEMPLATE = """
[Application]
name={package}
command={executable}
runtime=org.freedesktop.Platform/x86_64/1.6

[Context]
shared=network;
sockets=x11;wayland;pulseaudio;
devices=dri;
"""

    DESKTOP_TEMPLATE = """
[Desktop Entry]
Name={name}
Exec={executable}
Comment={description}
"""

    APPDATA_TEMPLATE = """
<?xml version="1.0" encoding="UTF-8" ?>
<component type="desktop">
    <id>{package}.desktop</id>
    <name>{name}</name>
    <description>{description}</description>
</component>
    """

    with open("simulant.json") as f:
        data = json.loads(f.read())

    package_dir = join(build_dir, "package")

    if exists(package_dir):
        shutil.rmtree(package_dir)

    files_dir = join(package_dir, "files")
    binary_dir = join(package_dir, "files/bin")
    library_dir = join(package_dir, "files/lib")
    export_dir = join(package_dir, "export")
    desktop_file = join(export_dir, "applications", "{}.desktop".format(
        data["package"]
    ))
    appdata_file = join(export_dir, "appdata", "{}.appdata.xml".format(data["name"]))

    os.makedirs(binary_dir)
    os.makedirs(library_dir)
    os.makedirs(export_dir)
    os.makedirs(dirname(appdata_file))
    os.makedirs(dirname(desktop_file))

    args.release = True
    simulant_dir = _calculate_simulant_dir(args)

    for file in [x for x in os.listdir(simulant_dir) if x.endswith(".so")]:
        shutil.copy(join(simulant_dir, file), join(library_dir, file))

    with open(desktop_file, "w") as fout:
        fout.write(DESKTOP_TEMPLATE.format(**data))

    with open(appdata_file, "w") as fout:
        fout.write(APPDATA_TEMPLATE.format(**data).lstrip())

    project = data["executable"]
    executable = join(build_dir, project)
    assets = join(build_dir, "assets")

    shutil.copy(executable, binary_dir)
    shutil.copytree(assets, join(files_dir, "assets"))

    with open(join(package_dir, "metadata"), "w") as f:
        f.write(META_TEMPLATE.format(**data))

    temp_repo = join(build_dir, "repo")
    try:
        if exists(temp_repo):
            shutil.rmtree(temp_repo)

        command = "flatpak build-export {} {}".format(
            temp_repo, package_dir
        )

        subprocess.check_call(command.split())

        command = "flatpak build-bundle {} {}.flatpak {}".format(
            temp_repo,
            executable,
            data["package"]
        )

        subprocess.check_call(command.split())
    finally:
        if exists(temp_repo):
            shutil.rmtree(temp_repo)


def _start_docker_container(working_dir):
    volume_mount = "{}:/simulant-project:Z".format(abspath("."))

    # Start docker if neccesary and forcibly remove any existing build container
    commands = [
        "sudo service docker start",
        "sudo docker rm {} -f".format(DOCKER_CONTAINER_NAME)
    ]

    for cmd in commands:
        subprocess.call(cmd.split(), stdout=subprocess.DEVNULL)

    run_command = "sudo docker run -it -d --name={} -v {} --workdir={} kazade/dreamcast-sdk bash --login".format(
        DOCKER_CONTAINER_NAME, volume_mount, working_dir
    )

    subprocess.check_call(run_command, shell=True)

def _run_docker_command(command, check=True):
    run_command = 'sudo docker exec -it {} /bin/bash -c "{}"'.format(DOCKER_CONTAINER_NAME, command)

    if check:
        return subprocess.check_call(run_command, shell=True)
    else:
        return subprocess.call(run_command, shell=True)


def _generate_ip_bin(template, text, dest):
    command = "export IP_TEMPLATE_FILE={template}; /opt/toolchains/dc/kos/utils/makeip/makeip {text} {dest}".format(
        template=template, dest=dest, text=text
    )
    _run_docker_command(command)

    return dest


def _scramble_binary(binary, dest):
    bin_file = splitext(binary)[0] + ".bin"
    commands = [
        "source /etc/bash.bashrc; sh-elf-objcopy -R .stack -O binary -S -g {} {}".format(binary, bin_file),
        "source /etc/bash.bashrc; /opt/toolchains/dc/kos/utils/scramble/scramble {} {}".format(bin_file, dest),
#        "rm {}".format(bin_file) # Remove intermediate file
    ]

    for command in commands:
        _run_docker_command(command)


def _generate_dc_cdi(args, build_dir):

    IP_TXT_TEMPLATE = """
Hardware ID   : SEGA SEGAKATANA
Maker ID      : SEGA ENTERPRISES
Device Info   : 0000 CD-ROM1/1
Area Symbols  : JUE
Peripherals   : E000F10
Product No    : T0000
Version       : V1.000
Release Date  : 20000627
Boot Filename : 1ST_READ.BIN
SW Maker Name : {author}
Game Title    : {name}
""".strip()

    package_dir = join(build_dir, "package")
    if exists(package_dir):
        shutil.rmtree(package_dir)

    os.makedirs(package_dir)

    # Search for the .elf binary in the build directory
    binary = next(x for x in os.listdir(build_dir) if x.endswith(".elf"))
    binary = join(build_dir, binary)

    # Copy assets to the output directory
    shutil.copytree("assets", join(package_dir, "assets"))

    template = join("/simulant-project", "libraries/IP.TMPL")
    text = join(package_dir, "ip.txt")

    with open("simulant.json", "r") as fin:
        data = json.loads(fin.read())

    with open(text, "w") as fout:
        fout.write(IP_TXT_TEMPLATE.format(**data))

    ip_bin = _generate_ip_bin(
        join("/simulant-project", template),
        join("/simulant-project", text),
        join("/simulant-project", package_dir, "IP.BIN")
    )

    # Don't need the text file any more
    os.remove(text)

    _scramble_binary(
        join("/simulant-project", binary),
        join("/simulant-project", package_dir, "1ST_READ.BIN")
    )

    _run_docker_command("mkisofs -C 0,11702 -V {title} -G {ip_bin} -joliet -rock -l -o {name}.iso {package_dir}".format(
        title=data["name"], ip_bin=ip_bin, name=data["executable"], package_dir=join("/simulant-project", package_dir)
    ))

    _run_docker_command("/opt/toolchains/dc/kos/utils/img4dc/build/cdi4dc/cdi4dc {name}.iso {name}.cdi".format(
        name=data["executable"]
    ))


def package(args):
    if not _check_project():
        return 1

    plat = args.platform
    if plat == "native":
        if platform.system() == "Linux":
            plat = "linux"
        elif platform.system() == "Windows":
            plat = "windows"
        else:
            plat = "osx"

    if plat == "dreamcast":
        class Args:
            release = True
            platform = "dreamcast"

        # Compile to .elf using docker
        output = BuildOutput()
        build(Args(), output)

        _generate_dc_cdi(args, output.build_dir)

    elif plat == "linux":
        class Args:
            release = True
            platform = "native"
            use_global_simulant = False

        output = BuildOutput()

        build(Args(), output)  # Trigger a release build
        _generate_flatpak(args, output.build_dir)
    else:
        print("Packaging for {} is not currently supported".format(plat))
        return 1

    return 0


def test(args):
    return 0


def update(args):
    """
        Downloads the latest binaries from Google Cloud Storage, will download the debug + release
        binaries for the current platform, and also any cross-buildable versions (e.g. Dreamcast, Windows-on-Linux)
    """
    if not _check_project():
        return 1

    DOWNLOAD_ROOT = "https://storage.googleapis.com/staging.simulant-engine.appspot.com"

    system = platform.system()

    to_download = []

    if system == "Linux":
        to_download.extend([
            ("linux", "release", "simulant-linux-release.zip"),
            ("linux", "debug", "simulant-linux-debug.zip")
        ])
    elif system == "Darwin":
        to_download.extend([
            ("darwin", "release", "simulant-osx-release.zip"),
            ("darwin", "debug", "simulant-osx-debug.zip")
        ])
    else:
        print("Unsupported platform: {}".format(system))

    if not args.native_only:
        # Download cross-compile toolchains unless explicitly told not to
        to_download.append(("dreamcast", "release", "simulant-dreamcast-release.zip"))

    print("Downloading Simulant dependencies", end='', flush=True)

    for i, (plat, build_type, download) in enumerate(to_download):
        print(".", end='', flush=True)

        class Args:
            def __init__(self, platform, release):
                self.platform = platform
                self.release = release

        target_dir = _calculate_simulant_dir(
            Args(plat, build_type == "release")
        )

        url = "{}/{}".format(DOWNLOAD_ROOT, download)
        url = urlopen(url)

        with ZipFile(BytesIO(url.read())) as zipfile:
            tempdir = tempfile.mkdtemp()
            zipfile.extractall(path=tempdir)

            dest = join(target_dir, "include")
            if exists(dest):
                shutil.rmtree(dest)

            if not exists(dirname(dest)):
                os.makedirs(dirname(dest))

            shutil.copytree(
                join(tempdir, splitext(download)[0], "include"),
                join(target_dir, "include")
            )

            args = [
                join(tempdir, splitext(download)[0], "lib", build_type),
                join(target_dir, "lib")
            ]
            
            if exists(args[1]):
                shutil.rmtree(args[1])

            shutil.copytree(*args)
            
    print("Downloading assets...")

    url = "{}/{}".format(DOWNLOAD_ROOT, "simulant-assets.zip")
    url = urlopen(url)

    with ZipFile(BytesIO(url.read())) as zipfile:
        zipfile.extractall(path="assets/simulant")

    print("\nDone!\n")


def run(args):
    if not _check_project():
        return 1

    if args.rebuild:
        build(args)  # Trigger a build

    build_dir = _calculate_build_dir(args)

    with open("simulant.json") as f:
        data = json.loads(f.read())
        executable = data["executable"]

    env = dict(os.environ)
    env["LD_LIBRARY_PATH"] = join(_calculate_simulant_dir(args), "lib")

    if args.platform == "dreamcast":
        subprocess.run(
            ["lxdream", "-b", executable + ".cdi"],
            cwd=build_dir,
            env=env
        )
    else:
        subprocess.run(
            [abspath(join(build_dir, executable))],
            cwd=build_dir,
            env=env
        )

    return 0


COMMAND_LOOKUP = {
    'start': start,
    'build': build,
    'test': test,
    'package': package,
    'run': run,
    'update': update
}


def main():
    parser = argparse.ArgumentParser(description="Simulant Tool")
    subs = parser.add_subparsers(dest="subcommand")

    build = subs.add_parser("build", help="Build your project")
    build.add_argument("platform", default="native", nargs="?", choices=[
        "native", "dreamcast", "android", "windows"
    ])
    build.add_argument("--rebuild", default=False, action="store_true")
    build.add_argument("--release", default=False, action="store_true")
    build.add_argument(
        "--use-global-simulant", default=False, action="store_true",
        help="When specified, search the system for the Simulant includes and libraries"
    )

    package = subs.add_parser("package", help="Package your project for a particular platform")
    package.add_argument("platform", default="native", nargs="?", choices=[
        "native", "dreamcast", "android", "windows"
    ])

    start = subs.add_parser("start", help="Start a new Simulant project from a template")
    start.add_argument("project", action="store", type=str)
    start.add_argument("target", default=".", nargs="?", type=str)
    start.add_argument("-f", dest="force", action="store_true")
    start.add_argument("--native-only", action="store_true", default=False)

    test = subs.add_parser("test", help="Test your Simulant project")

    run = subs.add_parser("run", help="Run your application")
    run.add_argument("platform", default="native", nargs="?", choices=[
        "native", "dreamcast", "android", "windows"
    ])
    run.add_argument("--rebuild", default=False, action="store_true")
    run.add_argument("--release", default=False, action="store_true")

    update = subs.add_parser("update", help="Update Simulant library")
    update.add_argument("--native-only", action="store_true", default=False)

    opts = parser.parse_args()

    if not opts.subcommand:
        parser.print_help()
        return 0

    return COMMAND_LOOKUP[opts.subcommand](opts)


if __name__ == '__main__':
    sys.exit(main())
